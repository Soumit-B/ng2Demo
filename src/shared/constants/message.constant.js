import { Injectable } from '@angular/core';
export var MessageConstant = (function () {
    function MessageConstant() {
    }
    MessageConstant.Message = {
        SavedSuccessfully: 'Record Saved Successfully',
        SaveUnSuccessful: 'Record Saved Unsuccessful',
        ConfirmRecord: 'Confirm Record?',
        DeleteRecord: 'Delete Record?',
        TrialSwitchedOff: 'Trial Period Switched Off',
        SaveContractAddressAsAccountAddress: 'Save contract address as account address?',
        specialInstructions: 'Special Instructions',
        noSpecialInstructions: 'No Special Instructions',
        dateSelectionWarning: 'Start Date cannot be greater than End Date',
        GeneralError: 'General error occurred during processing',
        SaveError: 'Error occurred during save',
        NoSpecialCharecter: 'No Special Character',
        PermissionDenied: 'Permission Denied',
        RecordDeleted: 'Record Deleted Successfully',
        programNameAndDescRequired: 'Please Enter both Program name and Description!',
        assignAllApicodeConfirm: 'This will assign the chosen API code to all the selected Service Covers. Continue?',
        assignClearAllApicodeConfirm: 'This will clear all manually assigned API codes on the current selection. Continue?',
        programNameAndUserCodeRequired: 'Please Enter both Program name and User code!',
        noRecordFound: 'Record Not Found',
        RecordNotFound: 'Record Not Found',
        validprogramNameAndUserCodeRequired: 'Please Enter valid Program name and User code!',
        productNotRequired: 'Product Does Not Require Manual Visit Planning',
        RecordSavedSuccessfully: 'Record Saved Successfully',
        RecordDeletedSuccessfully: 'Record Deleted Successfully',
        Information: 'Information',
        BICNotRegistered: 'BICNumber not registered in system',
        CountryNLNotMatch: 'Country code must be NL',
        noRecordSelected: 'No record is selected.',
        OldAppointmentExistsQues: 'An open appointment exists for this Prospect. Do you want to close it now?',
        OldAppointmentExistsTitle: 'Open Diary Appointments Exist',
        DiaryAppointmentRequiredTitle: 'Diary Appointment Required',
        DiaryAppointmentRequiredQues: 'You must enter a Diary Appointment before you can enter Sales Quotes. Do you want to go to the Diary now?',
        ConfirmTitle: 'Confirm',
        SuccessTitle: 'Success',
        ErrorTitle: 'Error',
        WarningTitle: 'Warning',
        NoData: 'No data to show!',
        RouteAway: 'There are unsaved changes. Are you sure you want to move away?',
        PageNotCovered: 'Page not covered!'
    };
    MessageConstant.PageSpecificMessage = {
        contactInformation: 'Contact Information',
        invoiceReasonCodeAbsentError: 'A reason code must be entered if Re-Invoice is selected',
        unableToGeocode: 'Unable to Geocode Address',
        pestNetOnlineBlank: 'PestNetOnline Site Reference Is Blank. Please Complete if Existing PestNetOnline Site.',
        Please_ensure_that_you_have_verified_the_prospect_details_before_proceeding: 'Please ensure that you have verified the prospect details before proceeding',
        changesToPremiseAddress: 'Changes made to Premises Address Information will not affect invoicing.',
        Error_month_year: 'Error - Unable to calculate month && year',
        addPremiseTitle: 'Would You Like To Add Premise Locations?',
        addPremiseContent: 'Add Premise Locations?',
        AccessErrMsg: 'The access to time cannot be less than or equal to the access from time',
        DateErrMsg: 'The to date cannot be less than the from date',
        ServiceAdjHrs: 'The Service Adjustment Hours cannot be greater than 2',
        ServiceAdjMins: 'The Service Adjustment Minutes cannot be greater than 59',
        PremiseType: 'The Premise Type can only be either NS or SS',
        ProofOfServFax: 'The Proof of Service method by fax must be Y or left blank',
        PosFax: 'The Proof of Service fax number must be 10 digits long',
        PosFaxChar: 'The Proof of Service fax number cannot have a character in it',
        ProofOfServSMS: 'The Proof of Service method by SMS must be Y or left blank',
        PosSMS: 'The Proof of Service SMS number must be 10 digits long',
        PosSMSChar: 'The Proof of Service SMS number cannot have a character in it',
        ProofOfServEmail: 'The Proof of Service method by email must be Y or left blank',
        PosEmail: 'The Proof of Service email address cannot be left blank if (it is chosen as a proof of service method )',
        EmailInvalid: 'The email address is invalid',
        NotifyFax: 'The Notify of Service method by fax must be Y or left blank',
        NotifyFax10: 'The Notify of Service fax number must be 10 digits long',
        NotifyFaxChar: 'The Notify of Service fax number cannot have a character in it',
        NotifySMS: 'The Notify of Service method by SMS must be Y or left blank',
        NotifySMS10: 'The Notify of Service SMS number must be 10 digits long',
        NotifySMSChar: 'The Notify of Service SMS number cannot have a character in it',
        NotifyPhone: 'The Notify of Service method by Phone must be Y or left blank',
        NotifyPhone10: 'The Notify of Service Phone number must be 10 digits long',
        NotifyPhoneChar: 'The Notify of Service Phone number cannot have a character in it',
        NotifyEmail: 'The Notify of Service method by email must be Y or left blank',
        NotifyEmailBlank: 'The Notify of Service email address cannot be left blank if (it is chosen as a proof of service method )',
        NotifyDaysBefore14: 'The Notify of days before service cannot be greater than 14',
        NotifyDaysBefore0: 'The Notify of days before service cannot be less than 0',
        AllowAllTasks: 'The allow all tasks field must be either Y or blank',
        TechAddOnce: 'A tech can be added only once',
        SuburbPostCode: 'The suburb, state and postcode do not match',
        Product_Code_Is_Required: 'Product Code Is Required.',
        Visit_Frequency_Is_Required: 'Visit Frequency Is Required.',
        Effective_Date_Is_Required: 'Effective Date Is Required.',
        Service_Commence_Date_Is_Required: 'Service Commence Date Is Required.',
        Hard_Slot_Type_Is_Required: 'Hard-Slot Type Is Required',
        Changes_made_to_Account_Address_Information_will_not_affect_invoicing: 'Changes made to Account Address Information will not affect invoicing.',
        The_suburb_state_and_postcode_do_not_match: 'The suburb, state and postcode do not match',
        UpdateComplete: 'Update Complete',
        This_will_update_the_existing_SEPA_Mandate_Reference: 'This will update the existing SEPA Mandate Reference. Are you sure you want to continue?',
        Confirm_Generate_New: 'Confirm Generate New'
    };
    MessageConstant.decorators = [
        { type: Injectable },
    ];
    MessageConstant.ctorParameters = [];
    return MessageConstant;
}());
